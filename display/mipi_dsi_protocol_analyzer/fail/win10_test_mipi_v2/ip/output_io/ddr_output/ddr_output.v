/* Verilog netlist generated by SCUBA Diamond (64-bit) 3.12.0.240.2 */
/* Module Version: 5.8 */
/* C:\lscc\diamond\3.12\ispfpga\bin\nt64\scuba.exe -w -n ddr_output -lang verilog -synth lse -bus_exp 7 -bb -arch sn5w00 -type iol -mode Transmit -io_type LVTTL33 -width 17 -freq_in 100 -gear 2 -aligned -del -1 -fdc C:/Users/rui/Desktop/win10_crosslink/win10_test_mipi_v2/ip/output_io/ddr_output/ddr_output.fdc  */
/* Mon Jul 14 12:14:24 2025 */


`timescale 1 ns / 1 ps
module ddr_output (clkout, refclk, reset, data, dout)/* synthesis NGD_DRC_MASK=1 */;
    input wire refclk;
    input wire reset;
    input wire [33:0] data;
    output wire clkout;
    output wire [16:0] dout;

    wire db16;
    wire da16;
    wire db15;
    wire da15;
    wire db14;
    wire da14;
    wire db13;
    wire da13;
    wire db12;
    wire da12;
    wire db11;
    wire da11;
    wire db10;
    wire da10;
    wire db9;
    wire da9;
    wire db8;
    wire da8;
    wire db7;
    wire da7;
    wire db6;
    wire da6;
    wire db5;
    wire da5;
    wire db4;
    wire da4;
    wire db3;
    wire da3;
    wire db2;
    wire da2;
    wire db1;
    wire da1;
    wire db0;
    wire da0;
    wire scuba_vlo;
    wire scuba_vhi;
    wire sclk_t;
    wire clkos;
    wire clkop;
    wire buf_clkout;
    wire buf_douto16;
    wire buf_douto15;
    wire buf_douto14;
    wire buf_douto13;
    wire buf_douto12;
    wire buf_douto11;
    wire buf_douto10;
    wire buf_douto9;
    wire buf_douto8;
    wire buf_douto7;
    wire buf_douto6;
    wire buf_douto5;
    wire buf_douto4;
    wire buf_douto3;
    wire buf_douto2;
    wire buf_douto1;
    wire buf_douto0;

    ODDRX1F Inst4_ODDRX1F16 (.SCLK(sclk_t), .RST(reset), .D0(da16), .D1(db16), 
        .Q(buf_douto16));

    ODDRX1F Inst4_ODDRX1F15 (.SCLK(sclk_t), .RST(reset), .D0(da15), .D1(db15), 
        .Q(buf_douto15));

    ODDRX1F Inst4_ODDRX1F14 (.SCLK(sclk_t), .RST(reset), .D0(da14), .D1(db14), 
        .Q(buf_douto14));

    ODDRX1F Inst4_ODDRX1F13 (.SCLK(sclk_t), .RST(reset), .D0(da13), .D1(db13), 
        .Q(buf_douto13));

    ODDRX1F Inst4_ODDRX1F12 (.SCLK(sclk_t), .RST(reset), .D0(da12), .D1(db12), 
        .Q(buf_douto12));

    ODDRX1F Inst4_ODDRX1F11 (.SCLK(sclk_t), .RST(reset), .D0(da11), .D1(db11), 
        .Q(buf_douto11));

    ODDRX1F Inst4_ODDRX1F10 (.SCLK(sclk_t), .RST(reset), .D0(da10), .D1(db10), 
        .Q(buf_douto10));

    ODDRX1F Inst4_ODDRX1F9 (.SCLK(sclk_t), .RST(reset), .D0(da9), .D1(db9), 
        .Q(buf_douto9));

    ODDRX1F Inst4_ODDRX1F8 (.SCLK(sclk_t), .RST(reset), .D0(da8), .D1(db8), 
        .Q(buf_douto8));

    ODDRX1F Inst4_ODDRX1F7 (.SCLK(sclk_t), .RST(reset), .D0(da7), .D1(db7), 
        .Q(buf_douto7));

    ODDRX1F Inst4_ODDRX1F6 (.SCLK(sclk_t), .RST(reset), .D0(da6), .D1(db6), 
        .Q(buf_douto6));

    ODDRX1F Inst4_ODDRX1F5 (.SCLK(sclk_t), .RST(reset), .D0(da5), .D1(db5), 
        .Q(buf_douto5));

    ODDRX1F Inst4_ODDRX1F4 (.SCLK(sclk_t), .RST(reset), .D0(da4), .D1(db4), 
        .Q(buf_douto4));

    ODDRX1F Inst4_ODDRX1F3 (.SCLK(sclk_t), .RST(reset), .D0(da3), .D1(db3), 
        .Q(buf_douto3));

    ODDRX1F Inst4_ODDRX1F2 (.SCLK(sclk_t), .RST(reset), .D0(da2), .D1(db2), 
        .Q(buf_douto2));

    ODDRX1F Inst4_ODDRX1F1 (.SCLK(sclk_t), .RST(reset), .D0(da1), .D1(db1), 
        .Q(buf_douto1));

    ODDRX1F Inst4_ODDRX1F0 (.SCLK(sclk_t), .RST(reset), .D0(da0), .D1(db0), 
        .Q(buf_douto0));

    VLO scuba_vlo_inst (.Z(scuba_vlo));

    VHI scuba_vhi_inst (.Z(scuba_vhi));

    ODDRX1F Inst3_ODDRX1F (.SCLK(clkos), .RST(reset), .D0(scuba_vhi), .D1(scuba_vlo), 
        .Q(buf_clkout));

    OB Inst2_OB (.I(buf_clkout), .O(clkout))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB16 (.I(buf_douto16), .O(dout[16]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB15 (.I(buf_douto15), .O(dout[15]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB14 (.I(buf_douto14), .O(dout[14]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB13 (.I(buf_douto13), .O(dout[13]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB12 (.I(buf_douto12), .O(dout[12]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB11 (.I(buf_douto11), .O(dout[11]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB10 (.I(buf_douto10), .O(dout[10]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB9 (.I(buf_douto9), .O(dout[9]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB8 (.I(buf_douto8), .O(dout[8]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB7 (.I(buf_douto7), .O(dout[7]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB6 (.I(buf_douto6), .O(dout[6]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB5 (.I(buf_douto5), .O(dout[5]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB4 (.I(buf_douto4), .O(dout[4]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB3 (.I(buf_douto3), .O(dout[3]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB2 (.I(buf_douto2), .O(dout[2]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB1 (.I(buf_douto1), .O(dout[1]))
             /* synthesis IO_TYPE="LVTTL33" */;

    OB Inst1_OB0 (.I(buf_douto0), .O(dout[0]))
             /* synthesis IO_TYPE="LVTTL33" */;

    assign db16 = data[33];
    assign db15 = data[32];
    assign db14 = data[31];
    assign db13 = data[30];
    assign db12 = data[29];
    assign db11 = data[28];
    assign db10 = data[27];
    assign db9 = data[26];
    assign db8 = data[25];
    assign db7 = data[24];
    assign db6 = data[23];
    assign db5 = data[22];
    assign db4 = data[21];
    assign db3 = data[20];
    assign db2 = data[19];
    assign db1 = data[18];
    assign db0 = data[17];
    assign da16 = data[16];
    assign da15 = data[15];
    assign da14 = data[14];
    assign da13 = data[13];
    assign da12 = data[12];
    assign da11 = data[11];
    assign da10 = data[10];
    assign da9 = data[9];
    assign da8 = data[8];
    assign da7 = data[7];
    assign da6 = data[6];
    assign da5 = data[5];
    assign da4 = data[4];
    assign da3 = data[3];
    assign da2 = data[2];
    assign da1 = data[1];
    assign da0 = data[0];
    assign sclk_t = clkop;
    assign clkos = refclk;
    assign clkop = refclk;


    // exemplar begin
    // exemplar attribute Inst2_OB IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB16 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB15 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB14 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB13 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB12 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB11 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB10 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB9 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB8 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB7 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB6 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB5 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB4 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB3 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB2 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB1 IO_TYPE LVTTL33
    // exemplar attribute Inst1_OB0 IO_TYPE LVTTL33
    // exemplar end

endmodule
